include $(XDAQ_ROOT)/config/mfAutoconf.rules
include $(XDAQ_ROOT)/config/mfDefs.$(XDAQ_OS)

BUILD_HOME:=$(shell pwd)/../..

GIT_VERSION  := $(shell git describe --abbrev=4 --dirty --always --tags)
GEMDEVELOPER := $(shell id --user --name)

Project=cmsgemos
ShortProject=gem

# Debugging and profiling flags
DEBUG_CFlags    = -O0 -g3 -fno-inline
DEBUG_CCFlags   = ${DEBUG_CFlags}

PROFILING_Flags   = -pg
PROFILING_LDFlags = ${PROFILING_Flags}
PROFILING_LIBS    = profiler tcmalloc

# Modern compiler support, when available
GCC44Flags = -std=c++0x -std=gnu++0x
GCC47Flags = -std=c++11 -std=gnu++11
GCC48Flags = -std=c++14 -std=gnu++14
GCC49Flags = -std=c++17 -std=gnu++17

# User C and CC flags
UserCFlags  =-DGIT_VERSION=\"$(GIT_VERSION)\" -DGEMDEVELOPER=\"$(GEMDEVELOPER)\"
UserCFlags+=${GCC44Flags}
#UserCFlags+=${GCC47Flags}
#UserCFlags+=${GCC48Flags}
#UserCFlags+=${GCC49Flags}
UserCCFlags =${UserCFlags}
#UserCCFlags =-std=c++0x -std=gnu++0x -DGIT_VERSION=\"$(GIT_VERSION)\" -DGEMDEVELOPER=\"$(GEMDEVELOPER)\"

UserStaticLinkFlags  =
UserDynamicLinkFlags =

IncludeDirs+=$(XDAQ_ROOT)/include

## Python
PYTHON_VERSION ?= $(shell python -c "import distutils.sysconfig;print distutils.sysconfig.get_python_version()")
PYTHON_INCLUDE_PREFIX ?= $(shell python -c "import distutils.sysconfig;print distutils.sysconfig.get_python_inc()")
# Python Config
PYTHONCFLAGS = $(shell pkg-config python --cflags)
PYTHONLIBS   = $(shell pkg-config python --libs)
PYTHONGLIBS  = $(shell pkg-config python --glibs)

# ROOT Config
ROOTCFLAGS = $(shell root-config --cflags)
ROOTLIBS   = $(shell root-config --libs)
ROOTGLIBS  = $(shell root-config --glibs)

# MySQL Config
MySQLCFLAGS = $(shell mysql_config --cflags)
MySQLLIBS   = $(shell mysql_config --libs)
MySQLGLIBS  = $(shell mysql_config --glibs)

IncludeDirs+=${PYTHON_INCLUDE_PREFIX}
# IncludeDirs+=/usr/include/python2.7

LibraryDirs+=$(XDAQ_ROOT)/lib
# LibraryDirs+=/usr/local/lib

DependentLibraryDirs+=$(XDAQ_ROOT)/lib
# DependentLibraryDirs+=/usr/local/lib

# Let's clean this up and only link against the requried libs
DependentLibraries+=asyncresolv boost_system config log4cplus
DependentLibraries+=numa toolbox uuid xcept xdaq2rc xerces-c
# DependentLibraries+=python${PYTHON_VERSION}

#Libraries+= log4cplus config xcept xerces-c numa toolbox asyncresolv uuid

#UserExecutableLinkFlags+=-Wl,-rpath-link ${XDAQ_ROOT}/lib -Wl,-rpath-link $(uHALROOT)/lib
#UserExecutableLinkFlags+=-Wl,-rpath-link ${HCAL_XDAQ_ROOT}/lib
#UserExecutableLinkFlags+=-L$(CACTUS_HOME)/lib
#UserExecutableLinkFlags+=-lreadline -lncurses -lpthread -lboost_filesystem
#UserExecutableLinkFlags+=-lboost_regex -lboost_system -lcactus_extern_pugixml
#UserExecutableLinkFlags+=-lcactus_uhal_log -lcactus_uhal_grammars -lcactus_uhal_uhal

#include $(XDAQ_ROOT)/config/Makefile.rules
#include $(BUILD_HOME)/$(Project)/config/mfRPM_gem.rules

## Choose the version of GCC that we want to use
#GCC_VERSION = 6.1.0
#CC     = gcc-${GCC_VERSION}
#CPP    = g++-${GCC_VERSION}
#CXX    = g++-${GCC_VERSION}
#LD     = g++-${GCC_VERSION}
#AR     = ar-${GCC_VERSION}
#NM     = nm-${GCC_VERSION}
#RANLIB = ranlib-${GCC_VERSION}
#LIBDIR = /usr/local/gcc/${GCC_VERSION}/lib:/usr/local/gcc/${GCC_VERSION}/lib64
##If you ever happen to want to link against installed libraries
##in a given directory, LIBDIR, you must either use libtool, and
##specify the full pathname of the library, or use the `-LLIBDIR'
##flag during linking and do at least one of the following:
##   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
##     during execution
#LibraryDirs=${LIBDIR}:${LibraryDirs}
#DependentLibraryDirs=${LIBDIR}:${DependentLibraryDirs}
##   - add LIBDIR to the `LD_RUN_PATH' environment variable
##     during linking
##LD_RUN_PATH=${LIBDIR}:${LD_RUN_PATH}
##   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
#UserStaticLinkFlags+=-Wl,-rpath -Wl,${LIBDIR}'
#UserDynamicLinkFlags+=-Wl,-rpath -Wl,${LIBDIR}'
#UserExecutableLinkFlags+=-Wl,-rpath -Wl,${LIBDIR}'

GCCVERSION = $(shell $(CXX) --version | awk '/gcc /{print $0;exit 0;}')

## Choose the version of Clang that we want to use
##CLANG_VERSION = 3.4.2
#CC     = clang
#CPP    = clang++
#CXX    = clang++
#LD     = clang++
#AR     = llvm-ar
#NM     = llvm-nm
#RANLIB = llvm-ranlib
CLANGVERSION = $(shell $(CXX) --version | awk '/clang /{print $0;exit 0;}')
