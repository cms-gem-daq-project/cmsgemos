%define _package __package__
%define _packagename __packagename__
%define _longpackage __longpackage__
%define _longpackagename __longpackagename__
%define _version __version__
%define _release __release__
%define _gitrev __gitrev__
%define _builddate __builddate__
%define _prefix  __prefix__
%define _xdaqprefix  __xdaqprefix__
%define _tmppath /tmp
%define _packagedir __packagedir__
%define _os __os__
%define _platform __platform__
%define _project __project__
%define _author __author__
%define _summary __summary__
%define _url __url__
%define _buildarch __buildarch__
%define _includedirs __includedirs__
# %define _datadir __datadir__
%define _username __username__
%define _uid __uid__
%define _groupname __groupname__
%define _gid __gid__

%define _unpackaged_files_terminate_build 0

#
# Binary RPM specified attributed (lib and bin)
#
Summary: %{_summary}
Name: %{_project}-%{_longpackagename}
Version: %{_version}
Release: %{_release}
# Release: 0.git%{_gitrev}
Packager: %{_author}
Vendor: CMS GEM Online Software Group
# BuildArch: %{_buildarch}
License: MIT
Group: Applications/DAQ
## let's get the specific tag from git and put it here somehow?
## need to disentangle the tagname from the version of the package
#Source: https://gitlab.cern.ch/cms-gem-daq-project/cmsgemos/tags/v%{_version}/%{_project}-%{_packagename}-%{_version}-%{_release}.tbz2
Source: https://gitlab.cern.ch/cms-gem-daq-project/cmsgemos/tags/v%{_version}/%{_project}-%{_packagename}-%{_version}-%{_release}.tbz2
## github.io site, probably best to make this better documented
URL: %{_url}
BuildRoot: %{_tmppath}/%{_packagename}-%{_version}-%{_release}-buildroot
Prefix: %{_prefix}

%if 0%{?_requires}
Requires: __requires__
%endif

AutoReqProv: yes

#requires: gem-base, gem-calib, gem-hw, gem-supervisor, gem-utils, gem-readout, gem-HwMonitor, gem-calib

%description
__description__

#
# Devel RPM specified attributes (extension to binary rpm with include files)
#
%package -n %{_project}-%{_longpackagename}-devel
Summary:  Development package for %{_summary}
Group:    Applications/DAQ
Requires: %{_project}-%{_longpackagename}

%description -n %{_project}-%{_longpackagename}-devel
__description__

#
# Debuginfo RPM specified attributes (extension to binary rpm with include files)
#
%package -n %{_project}-%{_longpackagename}-debuginfo
Summary:  Debuginfo package for %{_summary}
Group:    Applications/DAQ
Requires: %{_project}-%{_longpackagename}

%description -n %{_project}-%{_longpackagename}-debuginfo
__description__

%pre
# # dynamic UID and GID
# getent group %{_groupname} >/dev/null || groupadd -r %{_groupname}
# getent passwd %{_username} >/dev/null || \
#     useradd -r -g %{_groupname} -d /usr/share/%{_project} -s /sbin/nologin \
#     -c "GEM DAQ software designed to be run as " %{_username}
# exit 0

# static UID and GID
getent group %{_groupname} >/dev/null || groupadd -f -g %{_gid} -r %{_groupname}
if ! getent passwd %{_username} >/dev/null ;
then
    if ! getent passwd %{_uid} >/dev/null ;
    then
        useradd -r -u %{_uid} -g %{_groupname} -d /usr/share/%{_project} -s /sbin/nologin \
        -c "GEM DAQ software designed to be run as " %{_username}
    else
        useradd -r -g %{_groupname} -d /usr/share/%{_project} -s /sbin/nologin \
        -c "GEM DAQ software designed to be run as " %{_username}
    fi
fi
exit 0

#%prep

#%setup 

#%build

#
# Prepare the list of files that are the input to the binary and devel RPMs
#
%install
rm -rf $RPM_BUILD_ROOT
mkdir -p $RPM_BUILD_ROOT%{_prefix}/{bin,lib,include,etc}
mkdir -p $RPM_BUILD_ROOT%{_prefix}/include/%{_package}/linux
# mkdir -p $RPM_BUILD_ROOT%{_prefix}/{scripts}/%{_package}
mkdir -p $RPM_BUILD_ROOT%{_prefix}/share/%{_package}/xml
mkdir -p $RPM_BUILD_ROOT/%{_xdaqprefix}/htdocs/%{_project}/%{_package}/html
mkdir -p $RPM_BUILD_ROOT/etc%{_prefix}.d
mkdir -p $RPM_BUILD_ROOT/usr/lib/debug%{_prefix}/{bin,lib}
# mkdir -p $RPM_BUILD_ROOT/usr/share/%{_project}/%{_longpackagename}-%{_version}
# mkdir -p $RPM_BUILD_ROOT/usr/share/doc/%{_package}-%{_version}
mkdir -p $RPM_BUILD_ROOT/usr/src/debug/%{_project}/%{_longpackagename}-%{_version}
mkdir -p $RPM_BUILD_ROOT/var%{_prefix}/%{_package}

# Build a manifest of the RPM's directory hierarchy for explicit inclusion.
## from: https://i.canthack.it/rpm-for-the-unwilling.html
echo "%%defattr(644, %%{_username},%%{_groupname}, 755)" > %{buildroot}/MANIFEST.lib
echo "%%defattr(644, %%{_username},%%{_groupname}, 755)" > %{buildroot}/MANIFEST.devel
echo "%%defattr(644, %%{_username},%%{_groupname}, 755)" > %{buildroot}/MANIFEST.debug

if [ -d %{_packagedir}/bin/%{_os}/%{_platform} ]; then
	cd %{_packagedir}/bin/%{_os}/%{_platform}; \
	find ./ -name ".git" -prune -o -exec ${XDAQ_ROOT}/${BUILD_SUPPORT}/install.sh {} %{_prefix}/bin/{} 755 \
             $RPM_BUILD_ROOT %{_packagedir} %{_project}-%{_packagename} %{_version} %{_prefix}/include '%{_includedirs}' \; ; \
        cd %{buildroot}; \
        find .%{_prefix}/bin/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi
if [ -d %{_packagedir}/lib/%{_os}/%{_platform} ]; then
	cd %{_packagedir}/lib/%{_os}/%{_platform}; \
	find ./ -name ".git" -prune -o -exec ${XDAQ_ROOT}/${BUILD_SUPPORT}/install.sh {} %{_prefix}/lib/{} 755 \
             $RPM_BUILD_ROOT %{_packagedir} %{_project}-%{_packagename} %{_version} %{_prefix}/include '%{_includedirs}' \; ; \
        cd %{buildroot}; \
        find .%{_prefix}/lib/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi
if [ -d %{_packagedir}/scripts ]; then
	cd %{_packagedir}/scripts
	find ./ -name ".git" -prune -o -name "*" -exec install -D -m 755 {} \
             $RPM_BUILD_ROOT%{_prefix}/bin/{} \; ; \
        cd %{buildroot}; \
        find .%{_prefix}/bin/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi
if [ -d %{_packagedir}/etc ]; then
	cd %{_packagedir}/etc; \
	find ./ -name ".git" -prune -o -name "*" -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT%{_prefix}/etc/{} \; ; \
        cd %{buildroot}; \
        find .%{_prefix}/etc/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi
if [ -d %{_packagedir}/xml ]; then
	cd %{_packagedir}/xml; \
	find ./ -name ".git" -prune -o -name "*" -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT%{_prefix}/share/%{_package}/xml/{} \; ; \
        cd %{buildroot}; \
        echo %{_prefix}/share/%{_package}/xml >> MANIFEST.lib
        # find .%{_prefix}/share/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi
if [ -d %{_packagedir}/html ]; then
	cd %{_packagedir}/html; \
	find ./ -name ".git" -prune -o -name "*" -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT/%{_xdaqprefix}/htdocs/%{_project}/%{_package}/html/{} \; ; \
        cd %{buildroot}; \
        echo %{_xdaqprefix}/htdocs/%{_project}/%{_package}/html >> MANIFEST.lib
        # find .%{_xdaqprefix}/htdocs/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.lib
fi

## Only for devel RPM?
if [ -d %{_packagedir}/include ]; then
	cd %{_packagedir}/include; \
	find ./ \( -name ".git" -prune -o -name "*.[hi]" -o -name "*.hpp" -o -name "*.hh" -o -name "*.hxx" \) -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT%{_prefix}/include/{} \; ; \
        cd %{buildroot}; \
        find .%{_prefix}/include/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.devel; \
fi

## Only for debuginfo RPM?
if [ -d %{_packagedir}/include ]; then
	cd %{_packagedir}/include; \
	find ./ \( -name ".git" -prune -o -name "*.[hi]" -o -name "*.hpp" -o -name "*.hh" -o -name "*.hxx" \) -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT/usr/src/debug/%{_project}/%{_longpackagename}-%{_version}/include/{} \; ; \
        cd %{buildroot}; \
        find ./usr/src/debug/%{_project}/%{_longpackagename}-%{_version}/include/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.debug
fi
if [ -d %{_packagedir}/src ]; then
	cd %{_packagedir}/src; \
	find ./ \( -name ".git" -prune -o -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" \) -exec install -D -m 644 {} \
             $RPM_BUILD_ROOT/usr/src/debug/%{_project}/%{_longpackagename}-%{_version}/src/{} \; ; \
        cd %{buildroot}; \
        find ./usr/src/debug/%{_project}/%{_longpackagename}-%{_version}/src/ -type f -or -type l | sed -e s/^.// -e /^$/d >> MANIFEST.debug
fi

if [ -e %{_packagedir}/ChangeLog ]; then
	install -m 644 %{_packagedir}/ChangeLog %{_packagedir}/rpm/RPMBUILD/BUILD/ChangeLog
else
	touch %{_packagedir}/rpm/RPMBUILD/BUILD/ChangeLog
fi

if [ -e %{_packagedir}/README ]; then
	install -m 644 %{_packagedir}/README %{_packagedir}/rpm/RPMBUILD/BUILD/README
else
	touch %{_packagedir}/rpm/RPMBUILD/BUILD/README
fi

if [ -e %{_packagedir}/MAINTAINER ]; then
	install -m 644 %{_packagedir}/MAINTAINER %{_packagedir}/rpm/RPMBUILD/BUILD/MAINTAINER
else
	touch %{_packagedir}/rpm/RPMBUILD/BUILD/MAINTAINER
fi

%clean
rm -rf $RPM_BUILD_ROOT

#
# Files that go in the binary RPM
#
%files -f %{buildroot}/MANIFEST.lib
%doc %attr(0644,%{_username},%{_groupname}) MAINTAINER ChangeLog README
# %changelog
%dir
# %{_prefix}/bin
# %{_prefix}/lib
# %{_prefix}/etc
# %{_xdaqprefix}/htdocs/%{_package}
# /etc%{_prefix}.d
# /var%{_prefix}/%{_package}

#
# Files that go in the devel RPM
#
%files -n %{_project}-%{_longpackagename}-devel -f %{buildroot}/MANIFEST.devel
# %{_prefix}/include
%doc %attr(0644,%{_username},%{_groupname}) MAINTAINER ChangeLog README
# %changelog

#
# Files that go in the debuginfo RPM
#
%files -n %{_project}-%{_longpackagename}-debuginfo -f %{buildroot}/MANIFEST.debug
%attr(0644,%{_username},%{_groupname}) %doc MAINTAINER ChangeLog README
# %changelog
%attr(0755,%{_username},%{_groupname}) /usr/lib/debug
# %attr(0644,%{_username},%{_groupname}) /usr/src/debug
