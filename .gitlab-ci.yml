## GitLab Continuous Integration YAML file

## used variables:
  # https://gitlab.cern.ch/help/ci/variables/README.md
  # CI_COMMIT_TAG ## tag name
  # CI_COMMIT_REF_NAME ## branch name
  # CI_COMMIT_SHA
  # CI_DEPLOY_USER
  # CI_DEPLOY_PASSWORD
  # GITLAB_USER_EMAIL
  # GITLAB_USER_ID
  # GITLAB_USER_LOGIN
  # GITLAB_USER_NAME

## used secure variables:
  # EOS_ACCOUNT_USERNAME: Username of  to write in the EOS folder whose path is EOS_PATH
  # EOS_ACCOUNT_PASSWORD: Account password
  # KRB_PASSWORD
  # KRB_USERNAME
  # CI_DEPLOY_PASSWORD

## Stage definitions
stages:
  - compile   # compile the sources, make the docs (if requested)
  # - docs      # compile the docs (if requested)
  - buildrpm  # build the RPMs
  - test      # test the packages (install, run basic tests)
  - deploy    # deploy the RPMs and docs

# ## script defaults
# before_script:
#   - 'echo mkdir -p ${ARTIFACT_DIR}'
#   - 'echo mkdir -p ~/.ssh'
#   # validate lxplus's SSH key?
#   - 'echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
#   # tell SSH to forward Kerberos credentials so lxplus can access AFS/EOS on behalf of the user
#   - 'echo -e "Host *\n\tGSSAPIDelegateCredentials yes\n\tGSSAPITrustDNS yes\n\n" > ~/.ssh/config'
# script:
#   # make sure to get a forwardable Kerberos ticket so lxplus can access AFS/EOS on behalf of the user
#   - 'echo "${KRB_PASSWORD}" \| kinit -f ${KRB_USERNAME}@CERN.CH'
#   - 'echo ssh ${KRB_USERNAME}@lxplus "ls /eos/some/path/"'
                          

# after_script:

## Define up anchors for various tasks, shared across all jobs utilizing them
# .compile_setup: &compile_setup

# .buildrpm_setup: &buildrpm_setup
  
# .deply_setup: &deply_setup

  
.common_variables: &common_variables
  BUILD_HOME:        /builds/${CI_PROJECT_NAMESPACE}
  XDAQ_OS:           linux
  XDAQ_ROOT:         /opt/xdaq
  LD_LIBRARY_PATH:   /opt/xdaq/lib
  ARTIFACT_DIR:      ${BUILD_HOME}/artifacts
  PACKAGE_NAME:      ${CI_PROJECT_NAME}
  # REPO_NAME:         ${${CI_REPOSITORY_URL##?*/}%%.*}

.deploy_variables: &deploy_variables
  EOS_BASE_WEB_DIR: /eos/project/c/cmsgemdaq/www
  EOS_COMMON_WEB_DIR: cmsgemdaq
  EOS_SITE_WEB_DIR:   ${EOS_BASE_WEB_DIR}/${PACKAGE_NAME}
  EOS_SW_DIR:         ${EOS_BASE_WEB_DIR}/sw/${PACKAGE_NAME}
  EOS_DOC_DIR:        ${EOS_BASE_WEB_DIR}/docs/${PACKAGE_NAME}
  EOS_LATEST_DIR:     ${EOS_SW_DIR}/unstable
  EOS_RELEASE_DIR:    ${EOS_SW_DIR}/releases
  EOS_DOC_DIR:        api
  EOS_REPO_DIR:       repos
  # EOS_PATH: ${EOS_BASE_WEB_DIR}/${EOS_COMMON_WEB_DIR}
  # EOS_PATH: ${EOS_BASE_WEB_DIR}/${EOS_SITE_WEB_DIR}/sw/release/${SUB_VERSION}/repos/${ARCH}
  
.slc6setup: &slc6setup
  ## drop support for slc6
  image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:slc6
  variables: *common_variables

.cc7setup: &cc7setup
  image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc7
  # image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc7:xdaq14-6
  # image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc7:xdaq15
  variables: *common_variables

.cc8setup: &cc8setup
  image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc8
  # image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc8:python2
  # image: gitlab-registry.cern.ch/cms-gem-daq-project/gemdaq_ci_worker/extrapy/devtoolsroot:cc8:python3
  variables: *common_variables

.common_setup: &common_setup
  ## these are set in the Dockerfile, but don't work in the gitlab CI by default
  - export BUILD_HOME=/builds/$CI_PROJECT_NAMESPACE
  - export ARTIFACT_DIR=$BUILD_HOME/artifacts
  - mkdir -p ${ARTIFACT_DIR}
  ## need to pull in all cmsgemos dependencies, based on some requirements?
  # - yum clean all && yum install xhal xhal-devel
  # - ${BUILD_HOME}/config/build/setupMachine.sh
  # - . /etc/profile/xdaq.sh
  - . ${BUILD_HOME}/cmsgemos/setup/etc/profile.d/gemdaqenv.sh
  - . ${BUILD_HOME}/cmsgemos/setup/paths.sh
  - env
  - sudo yum install -y daq-jansson\* xhal\* --enablerepo=gemos*
  - pip install -I --user "pip" "importlib" "codecov" "setuptools<38.2"

.retry_settings: &retry_settings
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      
.common_cache: &common_cache
  # key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  # key: "$BUILD_ARCH"
  untracked: true
  paths:
    - gempython/pkg
    - gem*/**/linux/*.o
    - gem*/**/linux/*.d
    - gem*/**/lib/*.so
    - gem*/rpm/**/*.rpm
  
.common_artifacts: &common_artifacts
  # name: $BUILD_ARCH
  name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  expire_in: 1d
  untracked: true
  
.compile_artifacts: &compile_artifacts
  ## take all compile artifacts and save
  <<: *common_artifacts
  paths:
    - ${ARTIFACTS_DIR}
    - gem*/src/**/*.d
    - gem*/src/**/*.o
    - gem*/lib/**/*.so
    - gempython/pkg

.docs_artifacts: &docs_artifacts
  ## take all docs artifacts and save
  <<: *common_artifacts
  paths:
    - ${ARTIFACTS_DIR}
    - doc/build/html

.rpm_artifacts: &rpm_artifacts
  ## take all packaging artifacts and save
  <<: *common_artifacts
  paths:
    - ${ARTIFACTS_DIR}
    - gem*/rpm/**/*.rpm
    - gem*/rpm/**/*.tar.gz
    - gem*/rpm/**/*.tbz2
    - gem*/rpm/**/*.zip
    - gem*/rpm/**/*.tgz
  
.compile_common: &compile_common
  only:
    - /^issue-.*$/
    - /^.*.hotfix.*$/
    - /^release.*$/
    - /^feature.*$/
    - /^feature.*ci-cd*$/
    - /^citest.*$/
    - develop
    - master
    - tags
  tags:
  stage: compile
  before_script:
    *common_setup
  script:
    - ls -l ${ARTIFACTS_DIR}
    - touch gempython/CHANGELOG.md
    - touch gempython/LICENSE
    - touch gempython/__init__.py
    - make all -j8
    - mkdir -p ${ARTIFACTS_DIR}/${XDAQ_PLATFORM}
    # - find . -type f -iname '*.d' -print0 -exec rsync -ahcX --progress --partial --relative --exclude="./gem*/rpm"  {} ${ARTIFACTS_DIR}/${XDAQ_PLATFORM} \+
    # - find . -type f -iname '*.o' -print0 -exec rsync -ahcX --progress --partial --relative --exclude="./gem*/rpm"  {} ${ARTIFACTS_DIR}/${XDAQ_PLATFORM} \+
    # - find . -type f -iname '*.so' -print0 -exec rsync -ahcX --progress --partial --relative --exclude="./gem*/rpm" {} ${ARTIFACTS_DIR}/${XDAQ_PLATFORM} \+
  # cache:
  #   key: "${CI_COMMIT_SHA}-cache-cc7"
  #   <<: *common_cache
  artifacts:
    # name: ${CI_JOB_STAGE}
    <<: *compile_artifacts

# .buildrpm_common: &buildrpm_common
  
.buildrpm_common: &buildrpm_common
  only:
    - /^feature.*ci-cd*$/
    - /^citest.*$/
    - tags
    - triggers
  tags:
  stage: buildrpm
  before_script:
    *common_setup
  script:
    - ls -l ${ARTIFACTS_DIR}
    ## copy compile artifacts into working tree
    - find . -type f -iname '*.d' -print0 -exec touch {} \;
    - find . -type f -iname '*.o' -print0 -exec touch {} \;
    - find . -type f -iname '*.so' -print0 -exec touch {} \;
    - touch gempython/CHANGELOG.md
    - touch gempython/LICENSE
    - touch gempython/__init__.py
    - make rpm
    - mkdir ${ARTIFACTS_DIR}/${XDAQ_PLATFORM}
    - find . -iname '*.rpm' -print0 -exec mv -t ${ARTIFACTS_DIR}/${XDAQ_PLATFORM} {} \+
    # - glob gem*/rpm/**/*.rpm # what is this for again?
  # cache:
  #   key: "${CI_COMMIT_SHA}-cache-cc7"
  #   <<: *common_cache
  artifacts:
    <<: *rpm_artifacts
  
# compile:slc6:
#   <<: *slc6setup
#   <<: *compile_common
#   environment:
#   variables:
#   cache:

compile:cc7:
  <<: *cc7setup
  <<: *compile_common
  environment:
  variables:
  # cache:

# compile:cc8:
#   <<: *cc8setup
#   <<: *compile_common
#   environment:
#   variables:
#   cache:
    
# coverage:
#   coverage: '/Code coverage: \d+\.\d+/'

# generate docs
docs:
  <<: *cc7setup
  stage: compile
  only:
    - /^feature.*ci-cd*$/
    - /^citest.*$/
    - tags
    - master
  dependencies:
  script:
    - make doc
    # - doxygen -s ${BUILD_HOME}/doc/cmsgemos.cfg >& /dev/null
  # cache:
  #   key: "${CI_COMMIT_SHA}-cache-cc7"
  #   <<: *common_cache
  artifacts:
    name: ${CI_JOB_STAGE}
    <<: *docs_artifacts
  coverage: '/Documentation coverage: \d+\.\d+/'

# generate RPMs
# buildrpm:slc6:
#   <<: *slc6setup
#   dependencies:
#     - compile:slc6
#     - docs
#   <<: *buildrpm_common
  
buildrpm:cc7:
  <<: *cc7setup
  dependencies:
    - compile:cc7
    - docs
  <<: *buildrpm_common

# buildrpm:cc8:
#   <<: *cc8setup
#   dependencies:
#     - compile:cc8
#     - docs
#   <<: *buildrpm_common

# run tests using the binary built before
# test:slc6:
#   <<: *slc6setup
#   stage: test
#   dependencies:
#     - buildrpm:slc6
#   script:
#     - echo ${BUILD_HOME}/runmytests.sh

test:cc7:
  <<: *cc7setup
  stage: test
  dependencies:
    - buildrpm:cc7
  script:
    - echo ${BUILD_HOME}/runmytests.sh

# test:cc8:
#   <<: *cc8setup
#   stage: test
#   dependencies:
#     - buildrpm:cc8
#   script:
#     - echo ${BUILD_HOME}/runmytests.sh

##package and release RPMs
deploy:
  stage: deploy
  only:
    - /^feature.*ci-cd*$/
    - /^citest.*$/
    - tags
  dependencies:
    - docs # is a dep of each of the below, so not necessary?
    # - compile:slc6
    # - buildrpm:slc6
    - compile:cc7
    - buildrpm:cc7
    # - compile:cc8
    # - buildrpm:cc8
  # cache:
  #   key: "${CI_COMMIT_SHA}-cache-cc7"
  before_script:
    *common_setup
  script:
    # - push python packages to pypi/conda
    # - push RPMs to packagecloud.io
    # - push sphinx/rst/md/rtd docs to readthedocs.io
    # - push sphinx/rst/md/rtd docs to $EOS_WEB_DIR/docs/${fulltag}, update doc main page index
    - .ci/deploy_eos.sh ${PACKAGE_NAME} ${ARTIFACTS_DIR}
